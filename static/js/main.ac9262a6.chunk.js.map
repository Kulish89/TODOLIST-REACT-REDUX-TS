{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","components/Watch/Watch.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Login/auth-reducer.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/Task/tasks-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Watch","useState","Date","date","setDate","useEffect","intervalId","setInterval","clearInterval","getTime","number","className","getHours","getMinutes","getSeconds","AddItemForm","React","memo","addItem","disabled","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","put","delete","post","get","taskId","taskTitle","taskData","authAPI","data","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialized","setAppErrorAC","setAppStatusAC","setAppInitializedAC","handleServerAppError","dispatch","messages","length","handleServerNetworkAppError","message","updateTaskTC","apiDataToUpdate","getState","task","tasks","find","t","id","Error","dataToUpdate","deadline","description","priority","startDate","res","resultCode","updateTaskAC","catch","response","changeTodolistFilterAC","filter","getTodolistsTC","todolists","todos","forEach","tl","items","setTasksAC","Task","useSelector","state","useDispatch","removeTask","useCallback","removeTaskAC","changeTaskStatus","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","Checkbox","Delete","TodoList","todoList","addTask","item","isAxiosError","addTaskTC","changeTodolistTitle","changeTodolistTitleAC","changeTodolistTitleTC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolistAC","entityStatus","map","style","paddingTop","Button","TodolistsList","auth","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","errors","email","test","password","initialValues","rememberMe","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","handleBlur","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","CircularProgress","rootReducer","combineReducers","action","todoListId","copyState","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac9262a6.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"35e9e887-e3d6-4312-8e2a-34df7e5725be\",\r\n  },\r\n});\r\n\r\n// types===========================================================================\r\n\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  addedDate: string;\r\n  order: number;\r\n};\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  High = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type ResponseType<T = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  fieldsErrors: Array<string>;\r\n  data: T;\r\n};\r\ntype GetTasksResponse = {\r\n  error: string | null;\r\n  totalCount: number;\r\n  items: Array<TaskType>;\r\n};\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  completed: boolean;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\nexport type UpdateTaskdataType = {\r\n  deadline: string;\r\n  description: string;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  status: TaskStatuses;\r\n  title: string;\r\n};\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\n// API========================================================\r\n\r\nexport const todolistAPI = {\r\n  updateTodolist(todolistId: string, title: string) {\r\n    const promise = instance.put<ResponseType>(`todo-lists/${todolistId}`, {\r\n      title: title,\r\n    });\r\n    return promise;\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    const promise = instance.delete<ResponseType>(\"todo-lists/\" + todolistId);\r\n    return promise;\r\n  },\r\n  createTodolist(title: string) {\r\n    const promise = instance.post<ResponseType<{ item: TodolistType }>>(\r\n      \"todo-lists\",\r\n      { title }\r\n    );\r\n    return promise;\r\n  },\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>(\"todo-lists\");\r\n  },\r\n  getTasks(todolistId: string) {\r\n    const promise = instance.get<GetTasksResponse>(\r\n      \"todo-lists/\" + todolistId + \"/tasks\"\r\n    );\r\n    return promise;\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(\r\n      \"todo-lists/\" + todolistId + \"/tasks/\" + taskId\r\n    );\r\n  },\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(\r\n      \"todo-lists/\" + todolistId + \"/tasks\",\r\n      {\r\n        title: taskTitle,\r\n      }\r\n    );\r\n  },\r\n  updateTask(todolistId: string, taskId: string, taskData: UpdateTaskdataType) {\r\n    return instance.put<ResponseType>(\r\n      \"todo-lists/\" + todolistId + \"/tasks/\" + taskId,\r\n      taskData\r\n    );\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{ userId?: number }>>(\"auth/login\", data);\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType<{ userId?: number }>>(\"auth/login\");\r\n  },\r\n  me() {\r\n    return instance.get<\r\n      ResponseType<{ id: number; email: string; login: string }>\r\n    >(\"auth/me\");\r\n  },\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const Watch = () => {\r\n  const [date, setDate] = useState<Date>(new Date());\r\n  useEffect(() => {\r\n    let intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n  const getTime = (number: number): string | number =>\r\n    number < 10 ? \"0\" + number : number;\r\n  return (\r\n    <div className=\"watch_container\">\r\n      <span>{getTime(date.getHours())}</span>:\r\n      <span>{getTime(date.getMinutes())}</span>:\r\n      <span>{getTime(date.getSeconds())}</span>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { AddBox } from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n  addItem,\r\n  disabled = false,\r\n}: AddItemFormPropsType) {\r\n  let [title, setTitle] = useState(\"\");\r\n  let [error, setError] = useState<string | null>(null);\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== \"\") {\r\n      addItem(title);\r\n      setTitle(\"\");\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label=\"Title\"\r\n        helperText={error}\r\n        disabled={disabled}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [title, setTitle] = useState(props.value);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    setTitle(props.value);\r\n  };\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return editMode ? (\r\n    <TextField\r\n      value={title}\r\n      onChange={changeTitle}\r\n      autoFocus\r\n      onBlur={activateViewMode}\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n  );\r\n});\r\n","import { setAppErrorAC, setAppInitializedAC } from \"./../../app/app-reducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { setAppStatusAC } from \"../../app/app-reducer\";\r\nimport { authAPI, LoginParamsType } from \"../../api/todolists-api\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkAppError,\r\n} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"login/SET-IS-LOGGED-IN\":\r\n      return { ...state, isLoggedIn: action.value };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n  ({ type: \"login/SET-IS-LOGGED-IN\", value } as const);\r\n\r\n// thunks\r\nexport const loginTC =\r\n  (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    authAPI\r\n      .login(data)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(setIsLoggedInAC(true));\r\n          dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkAppError(error, dispatch);\r\n      });\r\n  };\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  authAPI\r\n    .logout()\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(false));\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkAppError(error, dispatch);\r\n    });\r\n};\r\n// types\r\ntype ActionsType =\r\n  | ReturnType<typeof setIsLoggedInAC>\r\n  | ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setAppInitializedAC>;\r\n","import { authAPI } from \"../api/todolists-api\";\r\nimport { setIsLoggedInAC } from \"../features/Login/auth-reducer\";\r\nimport { AppThunkDispatch } from \"./store\";\r\n\r\nconst initialState = {\r\n  status: \"idle\" as RequestStatusType,\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\n// =======================================================\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"APP/SET-ERROR\":\r\n      return { ...state, error: action.error };\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, status: action.status };\r\n    case \"APP/SET-IS-INITIALIZED\":\r\n      return { ...state, isInitialized: action.value };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// actions============================================\r\n\r\nexport const setAppErrorAC = (error: string | null) =>\r\n  ({ type: \"APP/SET-ERROR\", error } as const);\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n  ({ type: \"APP/SET-STATUS\", status } as const);\r\n\r\nexport const setAppInitializedAC = (value: boolean) =>\r\n  ({ type: \"APP/SET-IS-INITIALIZED\", value } as const);\r\n\r\n// thunk====================================================\r\n\r\nexport const initializeAppTC = () => (dispatch: AppThunkDispatch) => {\r\n  authAPI.me().then((res) => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setAppInitializedAC(true));\r\n      dispatch(setIsLoggedInAC(true));\r\n    } else {\r\n    }\r\n    dispatch(setAppInitializedAC(true));\r\n  });\r\n};\r\n\r\n// types==================================================\r\n\r\nexport type ActionsType =\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof setAppInitializedAC>\r\n  | ReturnType<typeof setIsLoggedInAC>;\r\n\r\nexport type InitialStateType = {\r\n  status: RequestStatusType;\r\n  error: null | string;\r\n  isInitialized: boolean;\r\n};\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\n","import { ResponseType } from \"../api/todolists-api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../app/app-reducer\";\r\nimport { AppThunkDispatch } from \"../app/store\";\r\n\r\nexport const handleServerAppError = <D>(\r\n  data: ResponseType<D>,\r\n  dispatch: AppThunkDispatch\r\n) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC(data.messages[0]));\r\n  } else {\r\n    dispatch(setAppErrorAC(\"some error occurred\"));\r\n  }\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n};\r\nexport const handleServerNetworkAppError = (\r\n  error: any,\r\n  dispatch: AppThunkDispatch\r\n) => {\r\n  dispatch(\r\n    setAppErrorAC(error.message ? error.message : \"some error occurred\")\r\n  );\r\n  dispatch(setAppStatusAC(\"failed\"));\r\n};\r\n","import { AppRootStateType, AppThunkDispatch } from \"../../../app/store\";\r\n\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistAPI,\r\n} from \"../../../api/todolists-api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../../app/app-reducer\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkAppError,\r\n} from \"../../../utils/error-utils\";\r\nimport {\r\n  addTodolistAC,\r\n  removeTodolistAC,\r\n  setTodolistsAC,\r\n} from \"../Todolist/todolists-reducer\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n// ==============================================================================\r\n\r\nexport type ActionsType =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setAppStatusAC>;\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\n\r\nexport type UpdateDomainTaskDataType = {\r\n  deadline?: string;\r\n  description?: string;\r\n  priority?: TaskPriorities;\r\n  startDate?: string;\r\n  status?: TaskStatuses;\r\n  title?: string;\r\n};\r\n\r\n// ==========================================================================\r\n\r\nconst initialState: TasksStateType = {};\r\nexport const tasksReducer = (\r\n  state: TasksStateType = initialState,\r\n  action: ActionsType\r\n): TasksStateType => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TASK\":\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].filter(\r\n          (t) => t.id !== action.taskId\r\n        ),\r\n      };\r\n    case \"ADD-TASK\":\r\n      return {\r\n        ...state,\r\n        [action.task.todoListId]: [\r\n          action.task,\r\n          ...state[action.task.todoListId],\r\n        ],\r\n      };\r\n    case \"ADD-TODOLIST\":\r\n      return {\r\n        ...state,\r\n        [action.todolist.id]: [],\r\n      };\r\n    case \"REMOVE-TODOLIST\": {\r\n      const copyState = { ...state };\r\n      delete copyState[action.id];\r\n      return copyState;\r\n    }\r\n    case \"SET-TODOLISTS\": {\r\n      let copyState = { ...state };\r\n      action.todolists.forEach((tl) => (copyState[tl.id] = []));\r\n      return copyState;\r\n    }\r\n    case \"SET-TASKS\": {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolistId] = action.tasks;\r\n      return stateCopy;\r\n    }\r\n    case \"UPDATE-TASK\":\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map((t) =>\r\n          t.id === action.taskId ? { ...t, ...action.data } : t\r\n        ),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ===================================================================================\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n  ({ type: \"REMOVE-TASK\", taskId: taskId, todolistId: todolistId } as const);\r\n\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({ type: \"ADD-TASK\", task } as const);\r\n\r\nexport const updateTaskAC = (\r\n  taskId: string,\r\n  data: UpdateDomainTaskDataType,\r\n  todolistId: string\r\n) => {\r\n  return { type: \"UPDATE-TASK\", data, todolistId, taskId } as const;\r\n};\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n  ({ type: \"SET-TASKS\", tasks, todolistId } as const);\r\n\r\n// ===============================================================================\r\n\r\nexport const getTasksTC =\r\n  (todolistId: string) => (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistAPI.getTasks(todolistId).then((res) => {\r\n      const tasks = res.data.items;\r\n      dispatch(setTasksAC(tasks, todolistId));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    });\r\n  };\r\nexport const removeTaskTC =\r\n  (taskId: string, todolistId: string) => (dispatch: AppThunkDispatch) => {\r\n    todolistAPI.deleteTask(todolistId, taskId).then((res) => {\r\n      dispatch(removeTaskAC(taskId, todolistId));\r\n    });\r\n  };\r\nexport const addTaskTC =\r\n  (title: string, todolistId: string) => (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    try {\r\n      todolistAPI.createTask(todolistId, title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(addTaskAC(res.data.data.item));\r\n          dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      });\r\n    } catch (e) {\r\n      if (axios.isAxiosError<{ error: string }>(e)) {\r\n        const error = e.response?.data ? e.response.data.error : e.message;\r\n        handleServerNetworkAppError(error, dispatch);\r\n      }\r\n    }\r\n  };\r\nexport const updateTaskTC =\r\n  (\r\n    taskId: string,\r\n    apiDataToUpdate: UpdateDomainTaskDataType,\r\n    todolistId: string\r\n  ) =>\r\n  (dispatch: AppThunkDispatch, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find((t) => t.id === taskId);\r\n    if (!task) throw new Error(\"task not found\");\r\n    const dataToUpdate = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      status: task.status,\r\n      title: task.title,\r\n      ...apiDataToUpdate,\r\n    };\r\n    todolistAPI\r\n      .updateTask(todolistId, taskId, dataToUpdate)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(updateTaskAC(taskId, apiDataToUpdate, todolistId));\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((e: AxiosError<{ error: string }>) => {\r\n        const error = e.response ? e.response.data.error : e.message;\r\n        handleServerNetworkAppError(error, dispatch);\r\n      });\r\n  };\r\n","import { handleServerNetworkAppError } from \"./../../../utils/error-utils\";\r\nimport { RequestStatusType } from \"../../../app/app-reducer\";\r\nimport { todolistAPI, TodolistType } from \"../../../api/todolists-api\";\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../../app/app-reducer\";\r\nimport { AxiosError } from \"axios\";\r\nimport { AppThunkDispatch } from \"../../../app/store\";\r\nimport { getTasksTC } from \"../Task/tasks-reducer\";\r\n\r\n// ================================================================================\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | ReturnType<typeof setTodolistsAC>\r\n  | ReturnType<typeof setAppErrorAC>\r\n  | ReturnType<typeof setAppStatusAC>\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>;\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\n// ================================================================================\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\nexport const todolistsReducer = (\r\n  state: Array<TodolistDomainType> = initialState,\r\n  action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TODOLIST\":\r\n      return state.filter((tl) => tl.id !== action.id);\r\n    case \"ADD-TODOLIST\":\r\n      return [\r\n        { ...action.todolist, filter: \"all\", entityStatus: \"idle\" },\r\n        ...state,\r\n      ];\r\n    case \"CHANGE-TODOLIST-TITLE\":\r\n      return state.map((tl) =>\r\n        tl.id === action.id ? { ...tl, title: action.title } : tl\r\n      );\r\n    case \"CHANGE-TODOLIST-FILTER\":\r\n      return state.map((tl) =>\r\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\r\n      );\r\n    case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n      return state.map((tl) =>\r\n        tl.id === action.id ? { ...tl, entityStatus: action.status } : tl\r\n      );\r\n    case \"SET-TODOLISTS\":\r\n      return action.todolists.map((tl) => ({\r\n        ...tl,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      }));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ============================================================================\r\n\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n  ({ type: \"REMOVE-TODOLIST\", id: todolistId } as const);\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n  ({ type: \"ADD-TODOLIST\", todolist } as const);\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n  ({ type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title } as const);\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n  ({ type: \"CHANGE-TODOLIST-FILTER\", id, filter } as const);\r\nexport const changeTodolistEntityStatusAC = (\r\n  id: string,\r\n  status: RequestStatusType\r\n) => ({ type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status } as const);\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n  ({ type: \"SET-TODOLISTS\", todolists } as const);\r\n\r\n// ==============================================================================\r\n\r\nexport const getTodolistsTC = () => (dispatch: AppThunkDispatch) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistAPI\r\n    .getTodolists()\r\n    .then((res) => {\r\n      dispatch(setTodolistsAC(res.data));\r\n\r\n      return res.data;\r\n    })\r\n    .then((todos: Array<TodolistType>) => {\r\n      todos.forEach((tl) => {\r\n        dispatch(getTasksTC(tl.id));\r\n      });\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    })\r\n    .catch((e: AxiosError<{ error: string }>) => {\r\n      const error = e.response ? e.response.data.error : e.message;\r\n      handleServerNetworkAppError(error, dispatch);\r\n    });\r\n};\r\nexport const removeTodolistTC =\r\n  (todolistId: string) => (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistAPI.deleteTodolist(todolistId).then((res) => {\r\n      dispatch(removeTodolistAC(todolistId));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    });\r\n  };\r\nexport const addTodolistTC =\r\n  (title: string) => (dispatch: AppThunkDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistAPI.createTodolist(title).then((res) => {\r\n      dispatch(addTodolistAC(res.data.data.item));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    });\r\n  };\r\nexport const changeTodolistTitleTC =\r\n  (todolistId: string, title: string) => (dispatch: AppThunkDispatch) => {\r\n    todolistAPI.updateTodolist(todolistId, title).then((res) => {\r\n      dispatch(changeTodolistTitleAC(todolistId, title));\r\n    });\r\n  };\r\n","import React, { ChangeEvent, useCallback } from \"react\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { AppRootStateType } from \"../../../app/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolists-api\";\r\nimport { removeTaskTC, updateTaskTC } from \"./tasks-reducer\";\r\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\r\n\r\ntype TaskPropsType = {\r\n  taskId: string;\r\n  todolistId: string;\r\n};\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const task = useSelector<AppRootStateType, TaskType>(\r\n    (state) =>\r\n      state.tasks[props.todolistId].filter((t) => t.id === props.taskId)[0]\r\n  );\r\n  const dispatch = useDispatch();\r\n  const removeTask = useCallback(\r\n    () => dispatch(removeTaskTC(task.id, props.todolistId)),\r\n    [props.todolistId, dispatch, task.id]\r\n  );\r\n\r\n  const changeTaskStatus = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = e.currentTarget.checked;\r\n      dispatch(\r\n        updateTaskTC(\r\n          task.id,\r\n          {\r\n            status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n          },\r\n          props.todolistId\r\n        )\r\n      );\r\n    },\r\n    [props.todolistId, dispatch, task.id]\r\n  );\r\n\r\n  const onTitleChangeHandler = useCallback(\r\n    (newValue: string) => {\r\n      dispatch(updateTaskTC(task.id, { title: newValue }, props.todolistId));\r\n    },\r\n    [props.todolistId, dispatch, task.id]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      key={task.id}\r\n      className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\r\n    >\r\n      <Checkbox\r\n        checked={task.status === TaskStatuses.Completed}\r\n        color=\"primary\"\r\n        onChange={changeTaskStatus}\r\n      />\r\n\r\n      <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\r\n      <IconButton onClick={removeTask}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport { AppRootStateType } from \"../../../app/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/todolists-api\";\r\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\r\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  removeTodolistTC,\r\n  TodolistDomainType,\r\n} from \"./todolists-reducer\";\r\nimport { addTaskTC, getTasksTC } from \"../Task/tasks-reducer\";\r\nimport { Task } from \"../Task/Task\";\r\n\r\ntype PropsType = {\r\n  id: string;\r\n};\r\n\r\nexport const TodoList = React.memo(function (props: PropsType) {\r\n  const dispatch = useDispatch();\r\n  const todoList = useSelector<AppRootStateType, TodolistDomainType>(\r\n    (state) => state.todolists.filter((tl) => tl.id === props.id)[0]\r\n  );\r\n  const tasks = useSelector<AppRootStateType, Array<TaskType>>(\r\n    (state) => state.tasks[todoList.id]\r\n  );\r\n  // useEffect(() => {\r\n  //   dispatch(getTasksTC(props.id));\r\n  // }, [props.id, dispatch]);\r\n  const addTask = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTaskTC(title, todoList.id));\r\n    },\r\n    [dispatch, todoList.id]\r\n  );\r\n\r\n  const removeTodolist = () => {\r\n    dispatch(removeTodolistTC(props.id));\r\n  };\r\n  const changeTodolistTitle = useCallback(\r\n    (title: string) => {\r\n      dispatch(changeTodolistTitleTC(todoList.id, title));\r\n    },\r\n    [dispatch, todoList.id]\r\n  );\r\n\r\n  const onAllClickHandler = useCallback(\r\n    () => dispatch(changeTodolistFilterAC(todoList.id, \"all\")),\r\n    [dispatch, todoList.id]\r\n  );\r\n  const onActiveClickHandler = useCallback(\r\n    () => dispatch(changeTodolistFilterAC(todoList.id, \"active\")),\r\n    [dispatch, todoList.id]\r\n  );\r\n  const onCompletedClickHandler = useCallback(\r\n    () => dispatch(changeTodolistFilterAC(todoList.id, \"completed\")),\r\n    [dispatch, todoList.id]\r\n  );\r\n\r\n  let tasksForTodolist = tasks;\r\n\r\n  if (todoList.filter === \"active\") {\r\n    tasksForTodolist = tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n  if (todoList.filter === \"completed\") {\r\n    tasksForTodolist = tasks.filter((t) => t.status === TaskStatuses.Completed);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan value={todoList.title} onChange={changeTodolistTitle} />\r\n        <IconButton\r\n          onClick={removeTodolist}\r\n          disabled={todoList.entityStatus === \"loading\"}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm\r\n        addItem={addTask}\r\n        disabled={todoList.entityStatus === \"loading\"}\r\n      />\r\n      <div>\r\n        {tasksForTodolist.map((t) => (\r\n          <Task key={t.id} taskId={t.id} todolistId={todoList.id} />\r\n        ))}\r\n      </div>\r\n      <div style={{ paddingTop: \"10px\" }}>\r\n        <Button\r\n          variant={todoList.filter === \"all\" ? \"outlined\" : \"text\"}\r\n          onClick={onAllClickHandler}\r\n          color={\"inherit\"}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          variant={todoList.filter === \"active\" ? \"outlined\" : \"text\"}\r\n          onClick={onActiveClickHandler}\r\n          color={\"primary\"}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          variant={todoList.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n          onClick={onCompletedClickHandler}\r\n          color={\"secondary\"}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { TodoList } from \"./Todolist/TodoList\";\r\nimport {\r\n  addTodolistTC,\r\n  getTodolistsTC,\r\n  TodolistDomainType,\r\n} from \"./Todolist/todolists-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nexport const TodolistsList = () => {\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\r\n    (state) => state.todolists\r\n  );\r\n  const dispatch = useDispatch();\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  useEffect(() => {\r\n    if (!isLoggedIn) {\r\n      return;\r\n    }\r\n    dispatch(getTodolistsTC());\r\n  }, [dispatch, isLoggedIn]);\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistTC(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n  if (!isLoggedIn) {\r\n    return <Navigate to={\"/login\"} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodolist} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todolists.map((tl) => {\r\n          return (\r\n            <Grid item key={tl.id}>\r\n              <Paper style={{ padding: \"10px\" }}>\r\n                <TodoList key={tl.id} id={tl.id} />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { setAppErrorAC } from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType, string | null>(\r\n    (state) => state.app.error\r\n  );\r\n  const dispatch: Dispatch = useDispatch();\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={error !== null}\r\n      autoHideDuration={3000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"./auth-reducer\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = \"Email is required\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Invalid email address\";\r\n      }\r\n      if (!values.password) {\r\n        errors.password = \"Password is required\";\r\n      } else if (values.password.length < 4) {\r\n        errors.password = \"Password should be more than 4 symbols\";\r\n      }\r\n      return errors;\r\n    },\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(loginTC(values));\r\n    },\r\n  });\r\n  if (isLoggedIn) {\r\n    return <Navigate to={\"/\"} />;\r\n  }\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered\r\n                <a\r\n                  href={\"https://social-network.samuraijs.com/\"}\r\n                  target={\"_blank\"}\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  {\" \"}\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.errors.email && (\r\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n              )}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.errors.password && (\r\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n              )}\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                control={<Checkbox />}\r\n                {...formik.getFieldProps(\"rememberMe\")}\r\n                checked={formik.values.rememberMe}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport Container from \"@mui/material/Container\";\r\nimport \"./App.css\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Menu } from \"@mui/icons-material\";\r\nimport { Watch } from \"../components/Watch/Watch\";\r\nimport { TodolistsList } from \"../features/TodolistsList/TodolistsList\";\r\nimport { LinearProgress } from \"@material-ui/core\";\r\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType, AppThunkDispatch } from \"./store\";\r\nimport { initializeAppTC, RequestStatusType } from \"./app-reducer\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { Login } from \"../features/Login/Login\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { logoutTC } from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.app.isInitialized\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  const dispatch: AppThunkDispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, [dispatch]);\r\n\r\n  const logoutHandler = useCallback(() => {\r\n    dispatch(logoutTC());\r\n  }, [dispatch]);\r\n\r\n  if (!isInitialized) {\r\n    return <CircularProgress />;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">News</Typography>\r\n          {isLoggedIn && (\r\n            <Button color=\"inherit\" onClick={logoutHandler}>\r\n              Log out\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n        <Watch />\r\n      </AppBar>\r\n      {status === \"loading\" && <LinearProgress />}\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/\" element={<TodolistsList />} />\r\n          <Route path=\"/login\" element={<Login />} />\r\n          ​<Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>} />\r\n          ​<Route path=\"/*\" element={<Navigate to=\"/404\" />} />\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { authReducer } from \"./../features/Login/auth-reducer\";\r\nimport { tasksReducer } from \"../features/TodolistsList/Task/tasks-reducer\";\r\nimport { todolistsReducer } from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {\r\n  AnyAction,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  createStore,\r\n} from \"redux\";\r\nimport thunk, { ThunkDispatch } from \"redux-thunk\";\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type AppThunkDispatch = ThunkDispatch<AppRootStateType, any, AnyAction>;\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> =\r\n  useSelector;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./app/App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}